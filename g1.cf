--Program
--------------
PDefs. Program ::= [Def] ;

rules Def  ::=
                Use
              | Decl ";"
              | Init ";"
              | Func
              | "inline" Func ;

terminator Def "";

---------------------------------
--Functions
--------------
rules Func ::=
                Dtype Qid FDefList Block
              | Dtype Qid FDefList ";"
              | Dtype Qid FDecList ";" ;


rules FDefList ::=
                "(" ")"
              | "(" FTypeIds ")" ;


rules Block ::=
                "{" [Stm] "}"    ;


rules FDecList ::=
                "(" FTypeOptIds ")" ;


rules FTypeOptId ::=
                ArgP
              | ArgF ;


rules FTypeIds ::=
                ArgF
              | FTypeIds "," ArgF;


rules FTypeOptIds ::=
                ArgP
              | FTypeIds "," ArgP
              | FTypeOptIds "," FTypeOptId;


rules ArgF  ::=
                Dtype Qid
              | Dtype Qid "=" Exp;

rules ArgP ::=
                Dtype
              | Dtype "=" Exp;



---------------------------------
--Other
----------------
rules Use ::=
              "using" Qid ";"
            | "using" "namespace" Qid ";"
            | "typedef" Dtype Id ";"
            | "struct" Id "{" [DI] "}" ";" ;


---------------------------------
--Statements
---------------
--rules         Fora ::= Exp | ;
--rules         Forb ::= Fora  | Init;
--rules         Forc ::= Forb  | Decl;


rules Stm ::=
              Use
            | Init ";"
            | Decl ";"
            | Exp ";"

            | "return" Exp ";"
            | "return" ";"

            | "while" "(" Exp ")" Stm
            | "do" Stm "while" "(" Exp ")"
            | "for" "(" DI ";" Exp ";" Exp ")" Stm
            -- |"for" "(" Forc ";" Forb ";" Fora ")" Stm

            | "if" "(" Exp ")" Stm
            | "if" "(" Exp ")" Stm "else" Stm

            | ";"
            | Block;

terminator Stm ""   ;


---------------------------------
--Expressions
---------------

ETrue.    Exp16  ::= "true" ;
EFalse.   Exp16  ::= "false" ;
EInt.     Exp16  ::= Integer ;
EDouble.  Exp16  ::= Double ;
EString.  Exp16  ::= [String] ;
EChar.    Exp16  ::= Char;
EQid.     Exp16  ::= Qid ;

EApp.     Exp15  ::= Exp15 "(" [Exp] ")" ;
EInd.     Exp15  ::= Exp15 "["  Exp  "]" ;

EDot.     Exp15  ::= Exp15 "."  Id ;
EArrow.   Exp15  ::= Exp15 "->" Id ;
EDeRef.   Exp14  ::=       "*"  Exp14 ;
ERef.     Exp14  ::=       "&"  Exp14 ;
EPIncr.   Exp14  ::= Exp15 "++" ;
EPDecr.   Exp14  ::= Exp15 "--" ;

EIncr.    Exp13  ::=      "++"  Exp14 ;
EDecr.    Exp13  ::=      "--"  Exp14 ;
ENot.     Exp13  ::=       "!"  Exp14 ;

--EBAnd.   Exp12  ::= Exp12 "&"  Exp13 ;
EBOr.     Exp12  ::= Exp12 "|"  Exp13 ;
ETimes.   Exp12  ::= Exp12 "*"  Exp13 ;
EDiv.     Exp12  ::= Exp12 "/"  Exp13 ;
EMod.     Exp12  ::= Exp12 "%"  Exp13 ;

EPlus.    Exp11  ::= Exp11 "+"  Exp12 ;
EMinus.   Exp11  ::= Exp11 "-"  Exp12 ;

EGt.      Exp9   ::= Exp9 ">"   Exp10 ;
ELtEq.    Exp9   ::= Exp9 "<="  Exp10 ;
EGtEq.    Exp9   ::= Exp9 ">="  Exp10 ;
ELt.      Exp9   ::= Exp9 "<"   Exp10 ;

EEq.      Exp8   ::= Exp8 "=="  Exp9 ;
ENEq.     Exp8   ::= Exp8 "!="  Exp9 ;

EAnd.     Exp4   ::= Exp4 "&&"  Exp5 ;
EOr.      Exp3   ::= Exp3 "||"  Exp4 ;
EShiftL.  Exp3   ::= Exp3 "<<"  Exp4 ;
EShiftR.  Exp3   ::= Exp3 ">>"  Exp4 ;

EPlusEq.  Exp2   ::= Exp2 "+=" Exp3 ;
EMinusEq. Exp2   ::= Exp2 "-=" Exp3 ;
EAss.     Exp2   ::= Exp2 "="  Exp3 ;
ETer.     Exp2   ::= Exp2 "?"  Exp3 ":" Exp4 ;

EExcept.  Exp1   ::= "throw" Exp2;

coercions Exp 16 ;
separator Exp "," ;

--internal ETyped. Exp15 ::= "(" Exp ":" Type ")" ;


---------------------------------
--Init
----------------
rules Decl ::=
                Dtype [Id] ;
rules Init ::=
                Decl "=" Exp ;
rules DI ::=
                Decl
              | Init ;


separator Init "" ;
terminator DI ";";




---------------------------------
--Types
-------------
rules Type   ::= "bool" | "int" | "double" | "void" ;
rules Dtype1 ::= Type | Qid ;

rules Dtype ::=
              Dtype1
            | "const" Dtype1
            | Dtype1 "&"
            | "const" Dtype1 "&";




----------------------------------
--Ids
-------------
rules Qid ::=
              Qid "::" Qid_
            | Qid_ ;

rules Qid_ ::=
              Id
            | Id "<" [Dtype] ">" ;


separator nonempty Id "," ;
separator nonempty Dtype "," ;


separator nonempty String "" ;

token Id (letter (letter | digit | '_')*) ;




-----------------------------------
--Comments
-------------
comment "#" ;
comment "//" ;
comment "/*" "*/" ;
