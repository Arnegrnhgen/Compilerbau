PDefs.   Program ::= [Def] ;

DFun.    Def    ::= Dtype Qid "(" [Arg] ")" "{" [Stm] "}" ;

DUse.    Def    ::= Use;


terminator Def "" ;

ADecl.   Arg    ::= Dtype Qid ;


separator Arg "," ;




UUsing.         Use ::= "using" Qid ";" ;
UNameSpace.     Use ::= "using" "namespace" Qid ";" ;
UType.          Use ::= "typedef" Dtype Id ";" ;


SUse.        Stm ::= Use ;
SExp.        Stm ::= Exp ";" ;
SDecls.      Stm ::= Dtype [Qid] ";" ;
SInit.       Stm ::= Dtype Qid "=" Exp ";" ;
SReturn.     Stm ::= "return" Exp ";" ;
SReturnVoid. Stm ::= "return" ";" ;
SWhile.      Stm ::= "while" "(" Exp ")" Stm ;
SBlock.      Stm ::= "{" [Stm] "}" ;
SIf.         Stm ::= "if" "(" Exp ")" Stm ;
SIfElse.     Stm ::= "if" "(" Exp ")" Stm "else" Stm ;

terminator Stm "" ;

ETrue.   Exp15  ::= "true" ;
EFalse.  Exp15  ::= "false" ;
EInt.    Exp15  ::= Integer ;
EDouble. Exp15  ::= Double ;
EString. Exp15  ::= [String] ;

DType.   Dtype  ::=  Type ;
DQId.    Dtype  ::=  Qid  ;
DDType1.  Dtype  ::= PreSpec Dtype ;
DDType2.  Dtype  ::= Dtype PostSpec ;


QId1.	 Qid	::= Id ;
QId2.	 Qid	::= Qid "::" Qid ;

QId3.	 Qid	::= Qid "<" [Dtype] ">" ;



EQid.    Exp15  ::= Qid ;
EApp.    Exp15  ::= Exp14 "(" [Exp] ")" ;
EInd.    Exp15  ::= Exp15 "[" Exp "]" ;

EDot.    Exp14  ::= Exp14 "." Qid ;
EArrow.  Exp14  ::= Exp14 "->" Qid ;
EDeRef.  Exp14  ::= "*" Exp15;
ERef.    Exp14  ::= "&" Exp15;

EPIncr.  Exp14  ::= Exp15 "++" ;
EPDecr.  Exp14  ::= Exp15 "--" ;

EIncr.   Exp13  ::= "++" Exp14 ;
EDecr.   Exp13  ::= "--" Exp14 ;
ENot.    Exp13  ::= "!" Exp14 ;

EBAnd.  Exp12  ::= Exp12 "&"  Exp13 ;
EBOr.   Exp12  ::= Exp12 "|"  Exp13 ;


ETimes.  Exp12  ::= Exp12 "*"  Exp13 ;
EDiv.    Exp12  ::= Exp12 "/"  Exp13 ;
EMod.    Exp12  ::= Exp12 "%"  Exp13 ;    
EPlus.   Exp11  ::= Exp11 "+"  Exp12 ;
EMinus.  Exp11  ::= Exp11 "-"  Exp12 ;
ELt.     Exp9   ::= Exp9  "<"  Exp10 ;
EGt.     Exp9   ::= Exp9  ">"  Exp10 ;
ELtEq.   Exp9   ::= Exp9  "<=" Exp10 ;
EGtEq.   Exp9   ::= Exp9  ">=" Exp10 ;
EEq.     Exp8   ::= Exp8  "==" Exp9 ;
ENEq.    Exp8   ::= Exp8  "!=" Exp9 ;
EAnd.    Exp4   ::= Exp4  "&&" Exp5 ;
EOr.     Exp3   ::= Exp3  "||" Exp4 ;
EShiftL. Exp3   ::= Exp3  "<<" Exp4 ;
EShiftR. Exp3   ::= Exp3  ">>" Exp4 ;
EAss.    Exp2   ::= Exp3 "=" Exp2 ;
ETer.    Exp2   ::= Exp2 "?" Exp2 ":" Exp2 ;
EExcept. Exp1   ::= "throw" Exp2;

internal ETyped. Exp15 ::= "(" Exp ":" Type ")" ;

coercions Exp 15 ;

separator Exp "," ;
separator Qid "," ;
separator nonempty String "" ;
separator PreSpec "" ;
separator nonempty Dtype "," ;



rules Type   ::= "bool" | "int" | "double" | "void" ;
rules PreSpec ::= "const" ;
rules PostSpec  ::= "&" | "*" | ;

token Id (letter (letter | digit | '_')*) ;



comment "#" ;
comment "//" ;
comment "/*" "*/" ;

